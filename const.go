package tox

/*
#include <tox/tox.h>
#include <tox/toxav.h>
*/
import "C"

const (
	// PublicKeySize indicates the size of a Tox Public Key in bytes.
	PublicKeySize = int(C.TOX_PUBLIC_KEY_SIZE)

	// SecretKeySize indicates the size of a Tox Secret Key in bytes.
	SecretKeySize = int(C.TOX_SECRET_KEY_SIZE)

	// AddressSize indicates the size of a Tox address in bytes. Tox
	// addresses are in the format
	//
	// [Public Key (TOX_PUBLIC_KEY_SIZE bytes)][nospam (4 bytes)][checksum (2 bytes)].
	//
	// The checksum is computed over the Public Key and the nospam value.
	// The first byte is an XOR of all the even bytes (0, 2, 4, ...), the
	// second byte is an XOR of all the odd bytes (1, 3, 5, ...) of the
	// Public Key and nospam.
	AddressSize = int(C.TOX_ADDRESS_SIZE)

	// MaxNameLength indicates the maximum length of a nickname in bytes.
	//
	// @deprecated The macro will be removed in 0.3.0. Use the function instead.
	MaxNameLength = int(C.TOX_MAX_NAME_LENGTH)

	// MaxStatusMessageLength indicates the maximum length of a status
	// message in bytes.
	//
	// @deprecated The macro will be removed in 0.3.0. Use the function instead.
	MaxStatusMessageLength = int(C.TOX_MAX_STATUS_MESSAGE_LENGTH)

	// MaxFriendRequestLength indicates the maximum length of a friend
	// request message in bytes.
	//
	// @deprecated The macro will be removed in 0.3.0. Use the function instead.
	MaxFriendRequestLength = int(C.TOX_MAX_FRIEND_REQUEST_LENGTH)

	// MaxMessageLength indicates the maximum length of a single message
	// after which it should be split.
	//
	// @deprecated The macro will be removed in 0.3.0. Use the function instead.
	MaxMessageLength = int(C.TOX_MAX_MESSAGE_LENGTH)

	// MaxCustomPacketSize indicates the maximum size of custom packets.
	// TODO(iphydf): should be LENGTH?
	//
	// @deprecated The macro will be removed in 0.3.0. Use the function instead.
	MaxCustomPacketSize = int(C.TOX_MAX_CUSTOM_PACKET_SIZE)

	// HashLength indicates the number of bytes in a hash generated by
	// tox_hash.
	HashLength = int(C.TOX_HASH_LENGTH)

	// FileIDLength indicates the number of bytes in a file id.
	FileIDLength = int(C.TOX_FILE_ID_LENGTH)

	// MaxFilenameLength indicates the maximum file name length for file
	// transfers.
	//
	// @deprecated The macro will be removed in 0.3.0. Use the function instead.
	MaxFilenameLength = int(C.TOX_MAX_FILENAME_LENGTH)
)

// UserStatus represents the possible statuses a client can have.
// The value should be one of UserStatusNone, UserStatusAway or
// UserStatusBusy.
type UserStatus int

const (
	// UserStatusNone indicates user is online and available.
	UserStatusNone = int(C.TOX_USER_STATUS_NONE)

	// UserStatusAway indicates user is away. Clients can set this e.g.
	// after a user defined inactivity time.
	UserStatusAway = int(C.TOX_USER_STATUS_AWAY)

	// UserStatusBusy indicates uer is busy. Signals to other clients
	// that this client does not currently wish to communicate.
	UserStatusBusy = int(C.TOX_USER_STATUS_BUSY)
)

// ConnectionType is the protocols that can be used to connect to the
// network or friends. The value should one of ConnectionNone,
// ConnectionTCP or ConnectionUDP.
type ConnectionType int

const (
	// ConnectionNone indicates there is no connection. This instance, or
	// the friend the state change is about, is now offline.
	ConnectionNone = int(C.TOX_CONNECTION_NONE)

	// ConnectionTCP indicates a TCP connection has been established.
	// For the own instance, this means it is connected through a TCP
	// relay, only. For a friend, this means that the connection to that
	// particular friend goes through a TCP relay.
	ConnectionTCP = int(C.TOX_CONNECTION_TCP)

	// ConnectionUDP indicates a UDP connection has been established.
	// For the own instance, this means it is able to send UDP packets to
	// DHT nodes, but may still be connected to a TCP relay.
	// For a friend, this means that the connection to that particular
	// friend was built using direct UDP packets.
	ConnectionUDP = int(C.TOX_CONNECTION_UDP)
)

// The value should be one of FileControlResume, FileControlPause or
// FileControlCancel.
type FileControlType int

const (
	// FileControlResume indicates sent by the receiving side to accept a
	// file send request. Also sent after a FileControlPause command to
	// continue sending or receiving.
	FileControlResume = int(C.TOX_FILE_CONTROL_RESUME)

	// FileControlPause indicates sent by clients to pause the file
	// transfer. The initial state of a file transfer is always paused on
	// the receiving side and running on the sending side. If both the
	// sending and receiving side pause the transfer, then both need to
	// send FileControlResume for the transfer to resume.
	FileControlPause = int(C.TOX_FILE_CONTROL_PAUSE)

	// FileControlCancel indicates sent by the receiving side to reject a
	// file send request before any other commands are sent. Also sent by
	// either side to terminate a file transfer.
	FileControlCancel = int(C.TOX_FILE_CONTROL_CANCEL)
)

// The value should be FileKindData or FileKindAvatar.
type FileKind uint32

const (
	// Arbitrary file data. Clients can choose to handle it based on the file name
	// or magic or any other way they choose.
	FileKindData = uint32(C.TOX_FILE_KIND_DATA)

	// Avatar file_id. This consists of tox_hash(image).
	// Avatar data. This consists of the image data.
	//
	// Avatars can be sent at any time the client wishes. Generally, a client will
	// send the avatar to a friend when that friend comes online, and to all
	// friends when the avatar changed. A client can save some traffic by
	// remembering which friend received the updated avatar already and only send
	// it if the friend has an out of date avatar.
	//
	// Clients who receive avatar send requests can reject it (by sending
	// FileControlCancel before any other controls), or accept it (by
	// sending FileControlResume). The file_id of length HashLength bytes
	// (same length as FileIDLength) will contain the hash. A client can compare
	// this hash with a saved hash and send FileControlCancel to terminate the avatar
	// transfer if it matches.
	//
	// When file_size is set to 0 in the transfer request it means that the client
	// has no avatar.
	FileKindAvatar = uint32(C.TOX_FILE_KIND_AVATAR)
)

type GroupchatType int

const (
	// Text-only conferences that must be accepted with the tox_conference_join function.
	ConferenceTypeText = uint8(C.TOX_CONFERENCE_TYPE_TEXT)

	// Video conference. The function to accept these is in toxav.
	ConferenceTypeAV = uint8(C.TOX_CONFERENCE_TYPE_AV)
)

type CallControlType int

const (
	// The empty bit mask. None of the bits specified below are set.
	FriendCallStateNone = int(C.TOXAV_FRIEND_CALL_STATE_NONE)

	// Set by the AV core if an error occurred on the remote end or if friend
	// timed out. This is the final state after which no more state
	// transitions can occur for the call. This call state will never be triggered
	// in combination with other call states.
	FriendCallStateError = int(C.TOXAV_FRIEND_CALL_STATE_ERROR)

	// The call has finished. This is the final state after which no more state
	// transitions can occur for the call. This call state will never be
	// triggered in combination with other call states.
	FriendCallStateFinished = int(C.TOXAV_FRIEND_CALL_STATE_FINISHED)

	// The flag that marks that friend is sending audio.
	FriendCallStateSendingAudio = int(C.TOXAV_FRIEND_CALL_STATE_SENDING_A)

	// The flag that marks that friend is sending video.
	FriendCallStateSendingVideo = int(C.TOXAV_FRIEND_CALL_STATE_SENDING_V)

	// The flag that marks that friend is receiving audio.
	FriendCallStateAcceptingAudio = int(C.TOXAV_FRIEND_CALL_STATE_ACCEPTING_A)

	// The flag that marks that friend is receiving video.
	FriendCallStateAcceptingVideo = int(C.TOXAV_FRIEND_CALL_STATE_ACCEPTING_V)
)

type MessageType int

const (
	// Normal text message. Similar to PRIVMSG on IRC.
	MessageTypeNormal = int(C.TOX_MESSAGE_TYPE_NORMAL)

	// A message describing an user action. This is similar to /me (CTCP ACTION)
	// on IRC.
	MessageTypeAction = int(C.TOX_MESSAGE_TYPE_ACTION)
)
