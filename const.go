package tox

/*
#include <tox/tox.h>
#include <tox/toxav.h>
*/
import "C"

const (
	// PublicKeySize indicates the size of a Tox Public Key in bytes.
	PublicKeySize = int(C.TOX_PUBLIC_KEY_SIZE)

	// SecretKeySize indicates the size of a Tox Secret Key in bytes.
	SecretKeySize = int(C.TOX_SECRET_KEY_SIZE)

	// NoSpamSize indicates the size of the nospam in bytes when written
	// in a Tox address.
	NoSpamSize = int(C.TOX_NOSPAM_SIZE)

	// AddressSize indicates the size of a Tox address in bytes. Tox
	// addresses are in the format
	//
	// [Public Key (TOX_PUBLIC_KEY_SIZE bytes)][nospam (4 bytes)][checksum (2 bytes)]
	//
	// The checksum is computed over the Public Key and the nospam value.
	// The first byte is an XOR of all the even bytes (0, 2, 4, ...), the
	// second byte is an XOR of all the odd bytes (1, 3, 5, ...) of the
	// Public Key and nospam.
	AddressSize = int(C.TOX_ADDRESS_SIZE)

	// TODO: need to remove because of deprecation.
	MaxNameLength = int(C.TOX_MAX_NAME_LENGTH)
	// TODO: need to remove because of deprecation.
	MaxStatusMessageLength = int(C.TOX_MAX_STATUS_MESSAGE_LENGTH)
	// TODO: need to remove because of deprecation.
	MaxFriendRequestLength = int(C.TOX_MAX_FRIEND_REQUEST_LENGTH)
	// TODO: need to remove because of deprecation.
	MaxMessageLength = int(C.TOX_MAX_MESSAGE_LENGTH)
	// TODO: need to remove because of deprecation.
	MaxCustomPacketSize = int(C.TOX_MAX_CUSTOM_PACKET_SIZE)

	// HashLength indicates the number of bytes in a hash generated by
	// Hash().
	HashLength = int(C.TOX_HASH_LENGTH)

	// FileIDLength indicates the number of bytes in a file id.
	FileIDLength = int(C.TOX_FILE_ID_LENGTH)

	// TODO: need to remove because of deprecation.
	MaxFilenameLength = int(C.TOX_MAX_FILENAME_LENGTH)
)

// TODO: choose a suitable file to place lines below.
// // MaxNameLength returns the maximum length of a nickname in bytes.
// func MaxNameLength() int { return int(C.tox_max_name_length()) }

// TODO: choose a suitable file to place lines below.
// // MaxStatusMessageLength returns the maximum length of a status message in bytes.
// func MaxStatusMessageLength() int { return int(C.tox_max_status_message_length()) }

// TODO: choose a suitable file to place lines below.
// // MaxFriendRequestLength returns the maximum length of a friend request message in bytes.
// func MaxFriendRequestLength() int { return int(C.tox_max_friend_request_length()) }

// TODO: choose a suitable file to place lines below.
// // MaxMessageLength returns the maximum length of a single message after which it should be split.
// func MaxMessageLength() int { return int(C.tox_max_message_length()) }

// TODO: choose a suitable file to place lines below.
// // MaxCustomPacketSize returns the maximum size of custom packets.
// func MaxCustomPacketSize() int { return int(C.tox_max_custom_packet_size()) }

// TODO: choose a suitable file to place lines below.
// // MaxFilenameLength returns the maximum file name length for file transfers.
// func MaxFilenameLength() int { return int(C.tox_max_filename_length()) }

// UserStatus represents the possible statuses a client can have.
type UserStatus int

const (
	// UserStatusNone indicates user is online and available.
	UserStatusNone = UserStatus(C.TOX_USER_STATUS_NONE)

	// UserStatusAway indicates User is away.
	// Clients can set this e.g. after a user defined inactivity time.
	UserStatusAway = UserStatus(C.TOX_USER_STATUS_AWAY)

	// UserStatusBusy indicates User is busy.
	// Signals to other clients that this client does not currently wish
	// to communicate.
	UserStatusBusy = UserStatus(C.TOX_USER_STATUS_BUSY)
)

// ConnectionType represents the protocols that can be used to connect to
// the network or friends.
type ConnectionType int

const (
	// ConnectionNone indicates there is no connection. This instance, or
	// the friend the state change is about, is now offline.
	ConnectionNone = ConnectionType(C.TOX_CONNECTION_NONE)

	// ConnectionTCP indicates a TCP connection has been established. For
	// the own instance, this means it is connected through a TCP relay,
	// only. For a friend, this means that the connection to that
	// particular friend goes through a TCP relay.
	ConnectionTCP = ConnectionType(C.TOX_CONNECTION_TCP)

	// ConnectionUDP indicates a UDP connection has been established. For
	// the own instance, this means it is able to send UDP packets to DHT
	// nodes, but may still be connected to a TCP relay. For a friend,
	// this means that the connection to that particular friend was built
	// using direct UDP packets.
	ConnectionUDP = ConnectionType(C.TOX_CONNECTION_UDP)
)

// FileControlType represents the file sending status.
type FileControlType int

const (
	// FileControlResume indicates there's a singal sent by the receiving
	// side to accept a file send request. Also sent after a
	// FileControlPause command to continue sending or receiving.
	FileControlResume = FileControlType(C.TOX_FILE_CONTROL_RESUME)

	// FileControlPause indicates there's a singal sent by clients to
	// pause the file transfer. Please note that the initial state of a
	// file transfer is always paused on the receiving side and running
	// on the sending side. If both the sending and receiving side pause
	// the transfer, then both need to send FileControlResume for the
	// transfer to resume.
	FileControlPause = FileControlType(C.TOX_FILE_CONTROL_PAUSE)

	// FileControlCancel indicates there's a singal sent by the receiving
	// side to reject a file send request before any other commands are
	// sent. Also sent by either side to terminate a file transfer.
	FileControlCancel = FileControlType(C.TOX_FILE_CONTROL_CANCEL)
)

type FileKind uint32

const (
	// Arbitrary file data. Clients can choose to handle it based on the file name or magic or any other way they choose.
	FileKindData = FileKind(C.TOX_FILE_KIND_DATA)

	// Avatar file_id. This consists of tox_hash(image). Avatar data. This consists of the image data.
	//
	// Avatars can be sent at any time the client wishes. Generally, a client will send the avatar to a friend when that friend comes online, and to all friends when the avatar changed. A client can save some traffic by remembering which friend received the updated avatar already and only send it if the friend has an out of date avatar.
	//
	// Clients who receive avatar send requests can reject it (by sending FileControlCancel before any other controls), or accept it (by sending FileControlResume). The file_id of length HashLength bytes (same length as FileIDLength) will contain the hash. A client can compare this hash with a saved hash and send FileControlCancel to terminate the avatar transfer if it matches.
	//
	// When file_size is set to 0 in the transfer request it means that the client has no avatar.
	FileKindAvatar = FileKind(C.TOX_FILE_KIND_AVATAR)
)

// ConferenceType represents types for the ConferenceInvite event.
type ConferenceType int

// GroupchatType is an alias of ConferenceType.
type GroupchatType ConferenceType

const (
	// ConferenceTypeText indicates a text-only conferences that must be
	// accepted with the ConferenceJoin function.
	ConferenceTypeText = ConferenceType(C.TOX_CONFERENCE_TYPE_TEXT)

	// ConferenceTypeAV indicates a video conference.
	ConferenceTypeAV = ConferenceType(C.TOX_CONFERENCE_TYPE_AV)
)

type CallControlType int

const (
	FriendCallStateError          = int(C.TOXAV_FRIEND_CALL_STATE_ERROR)
	FriendCallStateFinished       = int(C.TOXAV_FRIEND_CALL_STATE_FINISHED)
	FriendCallStateSendingAudio   = int(C.TOXAV_FRIEND_CALL_STATE_SENDING_A)
	FriendCallStateSendingVideo   = int(C.TOXAV_FRIEND_CALL_STATE_SENDING_V)
	FriendCallStateAcceptingAudio = int(C.TOXAV_FRIEND_CALL_STATE_ACCEPTING_A)
	FriendCallStateAcceptingVideo = int(C.TOXAV_FRIEND_CALL_STATE_ACCEPTING_V)
)

// MessageType represents message types for (*Tox)FriendSendMessage() and
// conference messages.
type MessageType int

const (
	// MessageTypeNormal indicates a normal text message. Similar to
	// PRIVMSG on IRC.
	MessageTypeNormal = int(C.TOX_MESSAGE_TYPE_NORMAL)

	// MessageTypeAction indicates a message describing an user action.
	// Similar to /me (CTCP ACTION) on IRC.
	MessageTypeAction = int(C.TOX_MESSAGE_TYPE_ACTION)
)
